<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="class_cmd_calculator_1_1_math_ast_1_1_dynamic_grouping_node" kind="class" language="C++" prot="public">
    <compoundname>CmdCalculator::MathAst::DynamicGroupingNode</compoundname>
    <basecompoundref refid="class_cmd_calculator_1_1_math_ast_1_1_dynamic_expression_containing_node_with_underlying_collection" prot="public" virt="non-virtual">CmdCalculator::MathAst::DynamicExpressionContainingNodeWithUnderlyingCollection&lt; StringT, UnderlyingPartsT &gt;</basecompoundref>
    <includes refid="_dynamic_grouping_node_8h" local="no">DynamicGroupingNode.h</includes>
    <templateparamlist>
      <param>
        <type>String</type>
        <declname>StringT</declname>
        <defname>StringT</defname>
      </param>
      <param>
        <type>std::ranges::range</type>
        <declname>UnderlyingPartsT</declname>
        <defname>UnderlyingPartsT</defname>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_cmd_calculator_1_1_math_ast_1_1_dynamic_grouping_node_1a083ebf1c5cecc9945ae7192174f4843e" prot="public" static="no">
        <type><ref refid="class_cmd_calculator_1_1_math_ast_1_1_dynamic_expression_containing_node_with_underlying_collection" kindref="compound">DynamicExpressionContainingNodeWithUnderlyingCollection</ref>&lt; <ref refid="class_cmd_calculator_1_1_math_ast_1_1_dynamic_expression_containing_node_with_underlying_collection" kindref="compound">StringT</ref>, <ref refid="class_cmd_calculator_1_1_math_ast_1_1_dynamic_expression_containing_node_with_underlying_collection" kindref="compound">UnderlyingPartsT</ref> &gt;::StringType</type>
        <definition>using CmdCalculator::MathAst::DynamicGroupingNode&lt; StringT, UnderlyingPartsT &gt;::StringType =  DynamicExpressionContainingNodeWithUnderlyingCollection&lt;StringT, UnderlyingPartsT&gt;::StringType</definition>
        <argsstring></argsstring>
        <name>StringType</name>
        <qualifiedname>CmdCalculator::MathAst::DynamicGroupingNode::StringType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="DynamicGroupingNode.h" line="23" column="1" bodyfile="DynamicGroupingNode.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_cmd_calculator_1_1_math_ast_1_1_dynamic_grouping_node_1afa89bef043eddca31df4d568be04f08e" prot="public" static="no">
        <type><ref refid="class_cmd_calculator_1_1_math_ast_1_1_dynamic_expression_containing_node_with_underlying_collection" kindref="compound">DynamicExpressionContainingNodeWithUnderlyingCollection</ref>&lt; <ref refid="class_cmd_calculator_1_1_math_ast_1_1_dynamic_expression_containing_node_with_underlying_collection" kindref="compound">StringT</ref>, <ref refid="class_cmd_calculator_1_1_math_ast_1_1_dynamic_expression_containing_node_with_underlying_collection" kindref="compound">UnderlyingPartsT</ref> &gt;::PartsType</type>
        <definition>using CmdCalculator::MathAst::DynamicGroupingNode&lt; StringT, UnderlyingPartsT &gt;::PartsType =  DynamicExpressionContainingNodeWithUnderlyingCollection&lt;StringT, UnderlyingPartsT&gt;::PartsType</definition>
        <argsstring></argsstring>
        <name>PartsType</name>
        <qualifiedname>CmdCalculator::MathAst::DynamicGroupingNode::PartsType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="DynamicGroupingNode.h" line="24" column="1" bodyfile="DynamicGroupingNode.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_cmd_calculator_1_1_math_ast_1_1_dynamic_grouping_node_1a61f4ab9343694bac8d824e434ee5cc24" prot="public" static="no">
        <type><ref refid="class_cmd_calculator_1_1_math_ast_1_1_dynamic_expression_containing_node_with_underlying_collection" kindref="compound">DynamicExpressionContainingNodeWithUnderlyingCollection</ref>&lt; <ref refid="class_cmd_calculator_1_1_math_ast_1_1_dynamic_expression_containing_node_with_underlying_collection" kindref="compound">StringT</ref>, <ref refid="class_cmd_calculator_1_1_math_ast_1_1_dynamic_expression_containing_node_with_underlying_collection" kindref="compound">UnderlyingPartsT</ref> &gt;::UnderlyingPartsType</type>
        <definition>using CmdCalculator::MathAst::DynamicGroupingNode&lt; StringT, UnderlyingPartsT &gt;::UnderlyingPartsType =  DynamicExpressionContainingNodeWithUnderlyingCollection&lt;StringT, UnderlyingPartsT&gt;::UnderlyingPartsType</definition>
        <argsstring></argsstring>
        <name>UnderlyingPartsType</name>
        <qualifiedname>CmdCalculator::MathAst::DynamicGroupingNode::UnderlyingPartsType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="DynamicGroupingNode.h" line="25" column="1" bodyfile="DynamicGroupingNode.h" bodystart="25" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_cmd_calculator_1_1_math_ast_1_1_dynamic_grouping_node_1a4e45cadf7d497866085825780b4c5e8b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="class_cmd_calculator_1_1_math_ast_1_1_dynamic_expression_node" kindref="compound">DynamicExpressionNode</ref>&lt; <ref refid="class_cmd_calculator_1_1_math_ast_1_1_dynamic_expression_containing_node_with_underlying_collection" kindref="compound">StringT</ref>, <ref refid="class_cmd_calculator_1_1_math_ast_1_1_dynamic_grouping_node_1afa89bef043eddca31df4d568be04f08e" kindref="member">PartsType</ref> &gt;</type>
        <definition>DynamicExpressionNode&lt; StringT, PartsType &gt; CmdCalculator::MathAst::DynamicGroupingNode&lt; StringT, UnderlyingPartsT &gt;::getContainedExpression</definition>
        <argsstring>() const override</argsstring>
        <name>getContainedExpression</name>
        <qualifiedname>CmdCalculator::MathAst::DynamicGroupingNode::getContainedExpression</qualifiedname>
        <reimplements refid="class_cmd_calculator_1_1_math_ast_1_1_dynamic_expression_containing_node_1af8c1b3e69ecd19df667e3531ae9c4f24">getContainedExpression</reimplements>
        <briefdescription>
<para>Accessor to the contained expression. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The expression contained within the node. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="DynamicGroupingNode.h" line="28" column="23" bodyfile="DynamicGroupingNode.h" bodystart="28" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="class_cmd_calculator_1_1_math_ast_1_1_dynamic_grouping_node_1a314a51741f50a0aa154c7ca11a061a87" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="class_cmd_calculator_1_1_math_ast_1_1_dynamic_expression_containing_node_with_underlying_collection" kindref="compound">StringT</ref></type>
        <definition>StringT CmdCalculator::MathAst::DynamicGroupingNode&lt; StringT, UnderlyingPartsT &gt;::getLeadingTrivia</definition>
        <argsstring>() const override</argsstring>
        <name>getLeadingTrivia</name>
        <qualifiedname>CmdCalculator::MathAst::DynamicGroupingNode::getLeadingTrivia</qualifiedname>
        <reimplements refid="class_cmd_calculator_1_1_math_ast_1_1_dynamic_math_ast_node_1ab119030478dfccaaae343daec89c93c2">getLeadingTrivia</reimplements>
        <briefdescription>
<para>Accessor to the AST node&apos;s leading trivia. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Trivial content at the beginning of the string contents of the node. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="DynamicGroupingNode.h" line="34" column="9" bodyfile="DynamicGroupingNode.h" bodystart="34" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="class_cmd_calculator_1_1_math_ast_1_1_dynamic_grouping_node_1aba1851eba715799c3615d9d1b5c8372c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="class_cmd_calculator_1_1_math_ast_1_1_dynamic_expression_containing_node_with_underlying_collection" kindref="compound">StringT</ref></type>
        <definition>StringT CmdCalculator::MathAst::DynamicGroupingNode&lt; StringT, UnderlyingPartsT &gt;::getTrailingTrivia</definition>
        <argsstring>() const override</argsstring>
        <name>getTrailingTrivia</name>
        <qualifiedname>CmdCalculator::MathAst::DynamicGroupingNode::getTrailingTrivia</qualifiedname>
        <reimplements refid="class_cmd_calculator_1_1_math_ast_1_1_dynamic_math_ast_node_1a5e3b93b8fe74dccdfb351d216607d01d">getTrailingTrivia</reimplements>
        <briefdescription>
<para>Accessor to the AST node&apos;s trailing trivia. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Trivial content at the end of the string contents of the node. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="DynamicGroupingNode.h" line="40" column="9" bodyfile="DynamicGroupingNode.h" bodystart="40" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="class_cmd_calculator_1_1_math_ast_1_1_dynamic_grouping_node_1ad9176a1677ef3b54a6e9434fd4b60a22" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="class_cmd_calculator_1_1_math_ast_1_1_dynamic_expression_containing_node_with_underlying_collection" kindref="compound">StringT</ref></type>
        <definition>StringT CmdCalculator::MathAst::DynamicGroupingNode&lt; StringT, UnderlyingPartsT &gt;::getStringRepresentation</definition>
        <argsstring>() const override</argsstring>
        <name>getStringRepresentation</name>
        <qualifiedname>CmdCalculator::MathAst::DynamicGroupingNode::getStringRepresentation</qualifiedname>
        <reimplements refid="class_cmd_calculator_1_1_math_ast_1_1_dynamic_math_ast_node_1a06c7437a7e811c1db2821bbd73a3e97a">getStringRepresentation</reimplements>
        <briefdescription>
<para>Accessor to the AST node&apos;s string representation. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>All non-trivial string contents of the node. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="DynamicGroupingNode.h" line="46" column="9" bodyfile="DynamicGroupingNode.h" bodystart="46" bodyend="49"/>
      </memberdef>
    </sectiondef>
    <requiresclause><ref refid="class_cmd_calculator_1_1_math_ast_1_1_dynamic_expression_containing_node_with_underlying_collection" kindref="compound">requires</ref> { <ref refid="class_cmd_calculator_1_1_math_ast_1_1_dynamic_expression_containing_node_with_underlying_collection" kindref="compound">typename</ref> <ref refid="class_cmd_calculator_1_1_math_ast_1_1_dynamic_expression_containing_node_with_underlying_collection" kindref="compound">DynamicExpressionContainingNodeWithUnderlyingCollection</ref>&lt;<ref refid="class_cmd_calculator_1_1_math_ast_1_1_dynamic_expression_containing_node_with_underlying_collection" kindref="compound">StringT</ref>, <ref refid="class_cmd_calculator_1_1_math_ast_1_1_dynamic_expression_containing_node_with_underlying_collection" kindref="compound">UnderlyingPartsT</ref>&gt;; }    </requiresclause>
    <briefdescription>
<para>An expression grouped by parentheses. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>StringT</parametername>
</parameternamelist>
<parameterdescription>
<para>The string type to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>UnderlyingPartsT</parametername>
</parameternamelist>
<parameterdescription>
<para>The type to use to store the underlying collection of parts of the contained expression. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>CmdCalculator::MathAst::DynamicExpressionContainingNodeWithUnderlyingCollection&lt; StringT, UnderlyingPartsT &gt;</label>
        <link refid="class_cmd_calculator_1_1_math_ast_1_1_dynamic_expression_containing_node_with_underlying_collection"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>CmdCalculator::MathAst::DynamicExpressionPartNode&lt; StringT &gt;</label>
        <link refid="class_cmd_calculator_1_1_math_ast_1_1_dynamic_expression_part_node"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>CmdCalculator::MathAst::DynamicGroupingNode&lt; StringT, UnderlyingPartsT &gt;</label>
        <link refid="class_cmd_calculator_1_1_math_ast_1_1_dynamic_grouping_node"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>CmdCalculator::MathAst::DynamicMathAstNode&lt; StringT &gt;</label>
        <link refid="class_cmd_calculator_1_1_math_ast_1_1_dynamic_math_ast_node"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>CmdCalculator::MathAst::DynamicOperandNode&lt; StringT &gt;</label>
        <link refid="class_cmd_calculator_1_1_math_ast_1_1_dynamic_operand_node"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>CmdCalculator::MathAst::ExpressionPartNode_IntendedSatisfaction</label>
        <link refid="struct_cmd_calculator_1_1_math_ast_1_1_expression_part_node___intended_satisfaction"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>CmdCalculator::MathAst::MathAstNode_IntendedSatisfaction</label>
        <link refid="struct_cmd_calculator_1_1_math_ast_1_1_math_ast_node___intended_satisfaction"/>
      </node>
      <node id="3">
        <label>CmdCalculator::MathAst::DynamicExpressionContainingNode&lt; StringT, decltype(std::declval&lt; UnderlyingPartsT &gt;|std::views::all)&gt;</label>
        <link refid="class_cmd_calculator_1_1_math_ast_1_1_dynamic_expression_containing_node"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>CmdCalculator::MathAst::DynamicExpressionContainingNodeWithUnderlyingCollection&lt; StringT, UnderlyingPartsT &gt;</label>
        <link refid="class_cmd_calculator_1_1_math_ast_1_1_dynamic_expression_containing_node_with_underlying_collection"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>CmdCalculator::MathAst::DynamicExpressionPartNode&lt; StringT &gt;</label>
        <link refid="class_cmd_calculator_1_1_math_ast_1_1_dynamic_expression_part_node"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>CmdCalculator::MathAst::DynamicGroupingNode&lt; StringT, UnderlyingPartsT &gt;</label>
        <link refid="class_cmd_calculator_1_1_math_ast_1_1_dynamic_grouping_node"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>CmdCalculator::MathAst::DynamicMathAstNode&lt; StringT &gt;</label>
        <link refid="class_cmd_calculator_1_1_math_ast_1_1_dynamic_math_ast_node"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>CmdCalculator::MathAst::DynamicOperandNode&lt; StringT &gt;</label>
        <link refid="class_cmd_calculator_1_1_math_ast_1_1_dynamic_operand_node"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>CmdCalculator::MathAst::ExpressionPartNode_IntendedSatisfaction</label>
        <link refid="struct_cmd_calculator_1_1_math_ast_1_1_expression_part_node___intended_satisfaction"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>CmdCalculator::MathAst::MathAstNode_IntendedSatisfaction</label>
        <link refid="struct_cmd_calculator_1_1_math_ast_1_1_math_ast_node___intended_satisfaction"/>
      </node>
      <node id="3">
        <label>CmdCalculator::MathAst::DynamicExpressionContainingNode&lt; StringT, decltype(std::declval&lt; UnderlyingPartsT &gt;|std::views::all)&gt;</label>
        <link refid="class_cmd_calculator_1_1_math_ast_1_1_dynamic_expression_containing_node"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="DynamicGroupingNode.h" line="18" column="1" bodyfile="DynamicGroupingNode.h" bodystart="20" bodyend="50"/>
    <listofallmembers>
      <member refid="class_cmd_calculator_1_1_math_ast_1_1_dynamic_grouping_node_1a4e45cadf7d497866085825780b4c5e8b" prot="public" virt="virtual"><scope>CmdCalculator::MathAst::DynamicGroupingNode</scope><name>getContainedExpression</name></member>
      <member refid="class_cmd_calculator_1_1_math_ast_1_1_dynamic_grouping_node_1a314a51741f50a0aa154c7ca11a061a87" prot="public" virt="virtual"><scope>CmdCalculator::MathAst::DynamicGroupingNode</scope><name>getLeadingTrivia</name></member>
      <member refid="class_cmd_calculator_1_1_math_ast_1_1_dynamic_grouping_node_1ad9176a1677ef3b54a6e9434fd4b60a22" prot="public" virt="virtual"><scope>CmdCalculator::MathAst::DynamicGroupingNode</scope><name>getStringRepresentation</name></member>
      <member refid="class_cmd_calculator_1_1_math_ast_1_1_dynamic_grouping_node_1aba1851eba715799c3615d9d1b5c8372c" prot="public" virt="virtual"><scope>CmdCalculator::MathAst::DynamicGroupingNode</scope><name>getTrailingTrivia</name></member>
      <member refid="class_cmd_calculator_1_1_math_ast_1_1_dynamic_grouping_node_1afa89bef043eddca31df4d568be04f08e" prot="public" virt="non-virtual"><scope>CmdCalculator::MathAst::DynamicGroupingNode</scope><name>PartsType</name></member>
      <member refid="class_cmd_calculator_1_1_math_ast_1_1_dynamic_grouping_node_1a083ebf1c5cecc9945ae7192174f4843e" prot="public" virt="non-virtual"><scope>CmdCalculator::MathAst::DynamicGroupingNode</scope><name>StringType</name></member>
      <member refid="class_cmd_calculator_1_1_math_ast_1_1_dynamic_grouping_node_1a61f4ab9343694bac8d824e434ee5cc24" prot="public" virt="non-virtual"><scope>CmdCalculator::MathAst::DynamicGroupingNode</scope><name>UnderlyingPartsType</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
