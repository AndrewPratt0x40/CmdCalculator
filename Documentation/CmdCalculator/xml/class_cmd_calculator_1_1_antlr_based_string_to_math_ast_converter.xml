<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="class_cmd_calculator_1_1_antlr_based_string_to_math_ast_converter" kind="class" language="C++" prot="public">
    <compoundname>CmdCalculator::AntlrBasedStringToMathAstConverter</compoundname>
    <basecompoundref refid="struct_cmd_calculator_1_1_string_to_math_ast_converter___intended_satisfaction" prot="public" virt="non-virtual">CmdCalculator::StringToMathAstConverter_IntendedSatisfaction</basecompoundref>
    <includes refid="_antlr_based_string_to_math_ast_converter_8h" local="no">AntlrBasedStringToMathAstConverter.h</includes>
    <templateparamlist>
      <param>
        <type>StringView</type>
        <declname>StringViewT</declname>
        <defname>StringViewT</defname>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_cmd_calculator_1_1_antlr_based_string_to_math_ast_converter_1aa3b92143931584cd7e14cb0632882f59" prot="public" static="no">
        <type>std::basic_string&lt; typename StringViewT::value_type &gt;</type>
        <definition>using CmdCalculator::AntlrBasedStringToMathAstConverter&lt; StringViewT &gt;::StringType =  std::basic_string&lt;typename StringViewT::value_type&gt;</definition>
        <argsstring></argsstring>
        <name>StringType</name>
        <qualifiedname>CmdCalculator::AntlrBasedStringToMathAstConverter::StringType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AntlrBasedStringToMathAstConverter.h" line="25" column="1" bodyfile="AntlrBasedStringToMathAstConverter.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_cmd_calculator_1_1_antlr_based_string_to_math_ast_converter_1a7ef9eff7a35e35632bfe9b4794982015" prot="public" static="no">
        <type>StringViewT</type>
        <definition>using CmdCalculator::AntlrBasedStringToMathAstConverter&lt; StringViewT &gt;::StringViewType =  StringViewT</definition>
        <argsstring></argsstring>
        <name>StringViewType</name>
        <qualifiedname>CmdCalculator::AntlrBasedStringToMathAstConverter::StringViewType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AntlrBasedStringToMathAstConverter.h" line="26" column="1" bodyfile="AntlrBasedStringToMathAstConverter.h" bodystart="26" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_cmd_calculator_1_1_antlr_based_string_to_math_ast_converter_1aeda09dda4c55038d900cdc0c088fce06" prot="private" static="no">
        <type>std::vector&lt; std::unique_ptr&lt; <ref refid="class_cmd_calculator_1_1_math_ast_1_1_dynamic_expression_part_node" kindref="compound">MathAst::DynamicExpressionPartNode</ref>&lt; <ref refid="class_cmd_calculator_1_1_antlr_based_string_to_math_ast_converter_1aa3b92143931584cd7e14cb0632882f59" kindref="member">StringType</ref> &gt; &gt; &gt;</type>
        <definition>using CmdCalculator::AntlrBasedStringToMathAstConverter&lt; StringViewT &gt;::UnderlyingPartsType =  std::vector&lt;std::unique_ptr&lt;MathAst::DynamicExpressionPartNode&lt;StringType&gt; &gt;&gt;</definition>
        <argsstring></argsstring>
        <name>UnderlyingPartsType</name>
        <qualifiedname>CmdCalculator::AntlrBasedStringToMathAstConverter::UnderlyingPartsType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AntlrBasedStringToMathAstConverter.h" line="29" column="1" bodyfile="AntlrBasedStringToMathAstConverter.h" bodystart="29" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_cmd_calculator_1_1_antlr_based_string_to_math_ast_converter_1a233bd95533863329d04dcb785065b4b8" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_cmd_calculator_1_1_math_ast_1_1_dynamic_expression_node" kindref="compound">MathAst::DynamicExpressionNode</ref>&lt; <ref refid="class_cmd_calculator_1_1_antlr_based_string_to_math_ast_converter_1aa3b92143931584cd7e14cb0632882f59" kindref="member">StringType</ref>, UnderlyingPartsType &gt;</type>
        <definition>MathAst::DynamicExpressionNode&lt; StringType, UnderlyingPartsType &gt; CmdCalculator::AntlrBasedStringToMathAstConverter&lt; StringViewT &gt;::getStringAsMathAst</definition>
        <argsstring>(StringViewT source) const</argsstring>
        <name>getStringAsMathAst</name>
        <qualifiedname>CmdCalculator::AntlrBasedStringToMathAstConverter::getStringAsMathAst</qualifiedname>
        <param>
          <type>StringViewT</type>
          <declname>source</declname>
        </param>
        <briefdescription>
<para>Converts a string into a mathematical abstract syntax tree. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to convert. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The root node of the resulting mathematical abstract syntax tree. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AntlrBasedStringToMathAstConverter.h" line="34" column="32" bodyfile="AntlrBasedStringToMathAstConverter.h" bodystart="34" bodyend="37"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>An algorithm to convert a string into a mathematical abstract syntax tree using ANTLR. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>StringViewT</parametername>
</parameternamelist>
<parameterdescription>
<para>The string view type to convert from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>CmdCalculator::AntlrBasedStringToMathAstConverter&lt; StringViewT &gt;</label>
        <link refid="class_cmd_calculator_1_1_antlr_based_string_to_math_ast_converter"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>CmdCalculator::StringToMathAstConverter_IntendedSatisfaction</label>
        <link refid="struct_cmd_calculator_1_1_string_to_math_ast_converter___intended_satisfaction"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>CmdCalculator::AntlrBasedStringToMathAstConverter&lt; StringViewT &gt;</label>
        <link refid="class_cmd_calculator_1_1_antlr_based_string_to_math_ast_converter"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>CmdCalculator::StringToMathAstConverter_IntendedSatisfaction</label>
        <link refid="struct_cmd_calculator_1_1_string_to_math_ast_converter___intended_satisfaction"/>
      </node>
    </collaborationgraph>
    <location file="AntlrBasedStringToMathAstConverter.h" line="21" column="1" bodyfile="AntlrBasedStringToMathAstConverter.h" bodystart="23" bodyend="39"/>
    <listofallmembers>
      <member refid="class_cmd_calculator_1_1_antlr_based_string_to_math_ast_converter_1a233bd95533863329d04dcb785065b4b8" prot="private" virt="non-virtual"><scope>CmdCalculator::AntlrBasedStringToMathAstConverter</scope><name>getStringAsMathAst</name></member>
      <member refid="class_cmd_calculator_1_1_antlr_based_string_to_math_ast_converter_1aa3b92143931584cd7e14cb0632882f59" prot="public" virt="non-virtual"><scope>CmdCalculator::AntlrBasedStringToMathAstConverter</scope><name>StringType</name></member>
      <member refid="class_cmd_calculator_1_1_antlr_based_string_to_math_ast_converter_1a7ef9eff7a35e35632bfe9b4794982015" prot="public" virt="non-virtual"><scope>CmdCalculator::AntlrBasedStringToMathAstConverter</scope><name>StringViewType</name></member>
      <member refid="class_cmd_calculator_1_1_antlr_based_string_to_math_ast_converter_1aeda09dda4c55038d900cdc0c088fce06" prot="private" virt="non-virtual"><scope>CmdCalculator::AntlrBasedStringToMathAstConverter</scope><name>UnderlyingPartsType</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
